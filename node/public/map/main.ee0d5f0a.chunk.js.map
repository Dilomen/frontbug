{"version":3,"sources":["Child.jsx","App.jsx","serviceWorker.js","es/index.js","index.js"],"names":["Child","Error","Component","App","Boolean","window","location","hostname","match","errorUrl","frontbugConfig","report","err","isFramework","errObj","handleError","formData","url","href","framework","data","JSON","stringify","fetch","body","method","headers","error","stack","msg","toString","errorStackTop","split","index","lastIndexOf","substr","path","lineNoStr","columnNoStr","lineNo","Number","columnNo","addEventListener","event","message","filename","lineno","colno","ErrorWatch","React","this","props","children","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"wOAceA,G,6KAXH,M,+BAKN,MAAM,IAAIC,MAAM,wB,GAPFC,cCSLC,E,uKAJX,OAAO,kBAAC,EAAD,U,GAFOD,aCQEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBClBAC,EAAW,qCAGXC,GACS,EAQTC,EAAS,SAACC,GAAmD,IAA9CC,EAA6C,uDAA/BH,EAC7BI,EAASC,EAAYH,GAEzB,IAAKE,EACH,OAAO,EAGT,IAAME,EAAQ,2BAAQF,GAAR,IACZG,IAAKZ,OAAOC,SAASY,KACrBC,UAAWP,EAAIO,WAAaN,IAExBO,EAAOC,KAAKC,UAAUN,GAO5BO,MAAMd,EAAU,CACde,KAAMJ,EACNK,OAAQ,OACRC,QAAS,CACP,eAAgB,sCA2CtB,SAASX,EAAYH,GACnB,IAAMe,EAAQf,EAAIgB,MACZC,EAAMjB,EAAIkB,WACVC,IAAkBJ,GAASA,EAAMK,MAAM,MAAM,GAEnD,GAAID,EAAe,CACjB,IAAIE,EAAQF,EAAcG,YAAY,KADrB,EAEsBH,EAAcI,OAAOF,EAAQ,GAAGD,MAAM,KAF5D,mBAEVI,EAFU,KAEJC,EAFI,KAEOC,EAFP,KAKjB,MAAO,CACLT,MACAO,OACAG,OALaC,OAAOH,EAAU7B,MAAM,OAAO,IAM3CiC,SALeD,OAAOF,EAAY9B,MAAM,OAAO,IAM/CmB,SAIJ,OAAO,EAtCTtB,OAAOqC,iBAAiB,SAAS,SAAAC,GAAU,IAE9Bd,EAKPc,EALFC,QACUR,EAIRO,EAJFE,SACQN,EAGNI,EAHFG,OACOL,EAELE,EAFFI,MACApB,EACEgB,EADFhB,MAUFhB,EARiB,CACfkB,MACAO,OACAG,SACAE,WACAd,QACAR,WAAW,OAGZ,GAmDH,ICxHM6B,EAAa,ID0GnB,SAAsBC,GAYpB,OAZ2B,gLAEPrC,GAChBD,EAAOC,GAAK,KAHW,+BAOvB,OAAOsC,KAAKC,MAAMC,aAPK,GACPH,EAAM/C,WC3GT,CAAiB+C,KACpCI,IAASC,OAAO,kBAACN,EAAD,KACZ,kBAAC,IAAMO,WAAP,KACI,kBAAC,EAAD,QAGNC,SAASC,eAAe,SFuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMiB,a","file":"static/js/main.ee0d5f0a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nclass Child extends Component {\n  handle() {\n    var a = 1\n    a()\n  }\n  render() { \n    if (1) {\n      throw new Error('a is not defined')\n    }\n    return <p onClick={ this.handle }>Hello World</p>\n  }\n}\n \nexport default Child;","import React, { Component } from 'react';\nimport './App.css';\nimport Child from './Child.jsx'\n\nclass App extends Component {\n  render() {\n    return <Child />\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const errorUrl = 'http://localhost:3090/errorRequest'; // 即时上报:主要是一些严重的问题，导致流程无法正常进行\n// 之后会设成可配置\n\nconst frontbugConfig = {\n  isFramework: true\n};\n/**\n * 手动上报\n * @param {*} err 错误对象\n * @param {*} isFramework 是否是框架，即代码是否被编译\n */\n\nconst report = (err, isFramework = frontbugConfig.isFramework) => {\n  let errObj = handleError(err);\n\n  if (!errObj) {\n    return false;\n  }\n\n  const formData = { ...errObj,\n    url: window.location.href,\n    framework: err.framework || isFramework\n  };\n  const data = JSON.stringify(formData); // if (window.navigator.sendBeacon) {\n  //   window.navigator.sendBeacon(errorUrl, data)\n  // } else if ((isIE && e.length < 2083) || (!isIE && e.length) < 8182) {\n  //   let image = new Image()\n  //   image.src = errorUrl + '?' + encodeURIComponent(JSON.stringify(data))\n  //  } else if(window.fetch) {\n\n  fetch(errorUrl, {\n    body: data,\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json; charset=utf-8'\n    }\n  }); // } else {\n  //   let XHR = null\n  //   if (window.XMLHttpRequest) {\n  //     XHR = new XMLHttpRequest()\n  //   }\n  //   XHR.withCredentials = true\n  //   XHR.open('POST', errorUrl, false)\n  //   XHR.setRequestHeader('Content-Type', 'application/json; charset=utf-8')\n  //   XHR.send(data)\n  // }\n}; // window.onerror = function(msg, path, lineNo, columnNo, error) {\n//   const errorObj = {\n//     msg,\n//     path,\n//     lineNo,\n//     columnNo,\n//     error,\n//     framework: '',\n//   };\n//   report(errorObj)\n// };\n\nwindow.addEventListener('error', event => {\n  const {\n    message: msg,\n    filename: path,\n    lineno: lineNo,\n    colno: columnNo,\n    error\n  } = event;\n  const errorObj = {\n    msg,\n    path,\n    lineNo,\n    columnNo,\n    error,\n    framework: false\n  };\n  report(errorObj);\n}, true);\n\nfunction handleError(err) {\n  const error = err.stack;\n  const msg = err.toString();\n  const errorStackTop = !!error && error.split('\\n')[1];\n\n  if (errorStackTop) {\n    let index = errorStackTop.lastIndexOf('/');\n    const [path, lineNoStr, columnNoStr] = errorStackTop.substr(index + 1).split(':');\n    const lineNo = Number(lineNoStr.match(/\\d+/)[0]);\n    const columnNo = Number(columnNoStr.match(/\\d+/)[0]);\n    return {\n      msg,\n      path,\n      lineNo,\n      columnNo,\n      error\n    };\n  }\n\n  return false;\n} // window.addEventListener('unhandledrejection', function(event) {\n//   console.log('unhandledrejection', event);\n//   event.preventDefault();\n//   const { type, reason } = event;\n//   // report({ type: event.type,reason: event.reason })\n// });\n\n\nfunction install(Vue) {\n  Vue.config.errorHandler = function (err) {\n    console.log(err);\n    report(err, true);\n  };\n}\n\nfunction ErrorRequest(React) {\n  class Error extends React.Component {\n    componentDidCatch(err) {\n      report(err, true);\n    }\n\n    render() {\n      return this.props.children;\n    }\n\n  }\n\n  return Error;\n}\nvar report$1 = {\n  install\n};\n\nexport default report$1;\nexport { ErrorRequest, report };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport { ErrorRequest } from './es/index'\nconst ErrorWatch = new ErrorRequest(React)\nReactDOM.render(<ErrorWatch>\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n  </ErrorWatch>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}